{
  "active": true,
  "connections": {
    "OpenAI": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "Send Email",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Webhook": {
      "main": [
        [
          {
            "node": "OpenAI",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2024-07-17T10:36:42.950Z",
  "id": "zi03CxETMJAA0DtM",
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "name": "Hold-off analysis",
  "nodes": [
    {
      "parameters": {
        "fromEmail": "admin@blzres.com",
        "toEmail": "brandon@blazeproperty.com",
        "subject": "=Payment Plan Analysis for  {{ $('Webhook').item.json.body.First_Name }} {{ $('Webhook').item.json.body.Last_Name }}",
        "emailFormat": "text",
        "text": "={{ $json.totalAmountPaid }}\n\n{{ $json.totalIncomeGenerated }}\n\n{{ $json.totalMonthlyExpenses }}\n\n{{ $json.abilityToCompletePlan }}\n\n{{ $json.probabilityOfSuccess }} ",
        "options": {}
      },
      "id": "0b5b0c6d-ac26-4152-a1c0-ddfd485e5fe2",
      "name": "Send Email",
      "type": "n8n-nodes-base.emailSend",
      "typeVersion": 2.1,
      "position": [
        1620,
        360
      ],
      "credentials": {
        "smtp": {
          "id": "CT7TQcD1DuyTHPFu",
          "name": "SMTP account"
        }
      }
    },
    {
      "parameters": {
        "resource": "assistant",
        "assistantId": {
          "__rl": true,
          "value": "asst_S6EJ4Zp1VbK9JDTyBUhNt62B",
          "mode": "list",
          "cachedResultName": "blazebackend"
        },
        "prompt": "define",
        "text": "=\"Analyze the payment plan viability for a tenant using the provided data. Calculate the date range for the completion of the payment plan including considering rent due on 1st of each month if the payment plan crosses months, the amount of income generated, and consider other bills. Determine if the tenant can reasonably complete the payment plan and still pay the next month's rent on time. Provide a probability of success.\n\n  Tenant Data:\n  - Delinquent Amount: {{ $json.body.Delinquent_Amount }}\n  - Request Date: {{ $json.body.Request_Date }}\n  - First Name: {{ $json.body.First_Name }}\n  - Last Name: {{ $json.body.Last_Name }}\n  - Email: {{ $json.body.Tenant_Email }}\n  - Phone 1: {{ $json.body.Tenant_Phone_1 }}\n  - Phone 2: {{ $json.body.Tenant_Phone_2 }}\n  - Address: {{ $json.body.Tenant_Address }}\n  - Reason: {{ $json.body.Reason }}\n\n  Employment Data:\n  - Employer Name: {{ $json.body.Employer_Name }}\n  - Employer Phone: {{ $json.body.Employer_Phone }}\n  - Employer Address: {{ $json.body.Employer_Address }}\n  - Occupation: {{ $json.body.Occupation }}\n  - Tenure: {{ $json.body.Tenure }}\n  - Monthly Income: {{ $json.body.Monthly_Income }}\n  - Other Income 1: {{ $json.body.Other_Income_1 }}\n  - Other Income 1 Amount: {{ $json.body.Other_Income_1_Amount }}\n  - Other Income 2: {{ $json.body.Other_Income_2 }}\n  - Other Income 2 Amount: {{ $json.body.Other_Income_2_Amount }}\n  - Other Income 3: {{ $json.body.Other_Income_3 }}\n  - Other Income 3 Amount: {{ $json.body.Other_Income_3_Amount }}\n\n  Emergency Contact:\n  - Name: {{ $json.body.Contact_Name }}\n  - Relationship: {{ $json.body.Contact_Relationship }}\n  - Phone: {{ $json.body.Contact_Phone }}\n  - Email: {{ $json.body.Contact_Email }}\n\n  Payment Plan:\n  - Initial Payment: {{ $json.body.Initial_Payment }} on {{ $json.body.Request_Date }}\n  - Payment 1: {{ $json.body.Payment_1 }} on {{ $json.body.Paymenr_1_Date }}\n  - Payment 2: {{ $json.body.Payment_2 }} on {{ $json.body.Payment_2_Date }}\n  - Payment 3: {{ $json.body.Payment_3 }} on {{ $json.body['Payment_3 Date'] }}\n  - Payment 4: {{ $json.body.Payment_4 }} on {{ $json.body.Payment_4_Date }}\n\n  Expenses:\n  - Monthly Rent: {{ $json.body.Monthly_Rent }}\n  - Monthly Bills: {{ $json.body.Monthly_Bills }}\n\n  Please analyze the above information and calculate:\n  1. The total amount paid towards the delinquent amount and the remaining balance after each payment.\n  2. The total income generated each month.\n  3. The total monthly expenses including rent and bills.\n  4. If the tenant will be able to complete the payment plan and pay the next month's rent on time.\n  5. Provide a probability of success in completing the payment plan.\n\n  Do not provide details of the calculations. \"\n\n",
        "options": {}
      },
      "id": "2bfccf8d-1ef4-4037-9134-7be0ac1b81ae",
      "name": "OpenAI",
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.3,
      "position": [
        1020,
        360
      ],
      "credentials": {
        "openAiApi": {
          "id": "Navm9hDUnjwpRcbB",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Get the assistant's output from the previous node\nconst analysisText = items[0].json.output;\n\n// Regular expression to match section headers (e.g., \"1. **Total Amount Paid Towards Delinquent Amount & Remaining Balance**\")\nconst regex = /\\n\\s*\\d+\\.\\s*\\*?\\*?[A-Za-z\\s&]+:\\*?\\*?/g;\n\n// Split the text into sections based on the headers\nconst sections = analysisText.split(regex);\n\n// Find the matches for the section headers to use as keys in the JSON object\nconst headers = analysisText.match(regex);\n\n// Create a JSON object from the sections\nconst analysisJSON = {};\n\n// Iterate over the sections and headers to populate the JSON object\nfor (let i = 1; i < sections.length; i++) {\n  const header = headers[i - 1]\n    .replace(/\\n\\s*\\d+\\.\\s*/, '') // Remove the section number\n    .replace(/\\*?\\*?:\\*?\\*?/, '') // Remove asterisks and colons\n    .trim(); // Trim any extra whitespace\n  \n  analysisJSON[header] = sections[i].trim();\n}\n\nreturn [{ json: analysisJSON }];\n"
      },
      "id": "8db98fe1-c7e3-4b8a-a4db-1ae67b632a43",
      "name": "Code",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1400,
        360
      ]
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "121c8f46-e356-4094-b9b7-16684a3e30eb",
        "options": {}
      },
      "id": "323df2ef-9962-4858-b2d8-8653640149bb",
      "name": "Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        820,
        360
      ],
      "webhookId": "121c8f46-e356-4094-b9b7-16684a3e30eb"
    }
  ],
  "pinData": {},
  "settings": {
    "executionOrder": "v1",
    "errorWorkflow": "Etm1h3dHXQYzby5C"
  },
  "staticData": null,
  "tags": [],
  "triggerCount": 1,
  "updatedAt": "2024-09-23T15:44:37.466Z",
  "versionId": "d8eba0ae-da94-4b1a-be6d-85653197bff0"
}